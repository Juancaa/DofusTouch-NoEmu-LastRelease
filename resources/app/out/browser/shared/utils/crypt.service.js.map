{"version":3,"sources":["../src/browser/shared/utils/crypt.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,wCAAyC;AACzC,MAAM,MAAM,GAAS,MAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACnD,MAAM,SAAS,GAAG,aAAa,CAAC;AAGhC,IAAa,YAAY,GAAzB;IAEI;IACA,CAAC;IAGM,OAAO,CAAC,IAAY,EAAE,QAAgB;QACzC,IAAI,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtD,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QACjD,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAGM,OAAO,CAAC,IAAY,EAAE,QAAgB;QACzC,IAAI,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC1D,IAAI,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC/C,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC9B,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAGM,UAAU,CAAC,IAAY;QAC1B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC;CACJ,CAAA;AAzBY,YAAY;IADxB,iBAAU,EAAE;;GACA,YAAY,CAyBxB;AAzBY,oCAAY","file":"crypt.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\nconst crypto = (<any>global).nodeRequire('crypto');\nconst algorithm = 'aes-256-ctr';\n\n@Injectable()\nexport class CryptService {\n\n    constructor() {\n    }\n\n    // Encrypt \"text\" with \"password\"\n    public encrypt(text: string, password: string) {\n        let cipher = crypto.createCipher(algorithm, password);\n        let crypted = cipher.update(text, 'utf8', 'hex');\n        crypted += cipher.final('hex');\n        return crypted;\n    }\n\n    // Decrypt \"text\" with \"password\"\n    public decrypt(text: string, password: string) {\n        let decipher = crypto.createDecipher(algorithm, password);\n        let dec = decipher.update(text, 'hex', 'utf8');\n        dec += decipher.final('utf8');\n        return dec;\n    }\n\n    // Return the hash of \"text\"\n    public createHash(text: string) {\n        return crypto.createHash('md5').update(text).digest(\"hex\");\n    }\n}"]}