{"version":3,"sources":["../src/browser/app/option/vip/multi-account/multi-account.component.ts"],"names":[],"mappings":"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","file":"multi-account.component.js","sourcesContent":["import { Component } from '@angular/core';\nimport { SettingsService } from './../../../../shared/settings/settings.service';\nimport { ApplicationService } from \"../../../../shared/electron/application.service\";\nimport { CryptService } from \"../../../../shared/utils/crypt.service\";\nimport { PromptService } from \"../../../../shared/utils/prompt.service\";\nimport { TranslateService } from \"ng2-translate\";\n\nconst { shell } = (<any>global).nodeRequire('electron').remote;\n\n@Component({\n    templateUrl: 'app/option/vip/multi-account/multi-account.component.html',\n    styleUrls: ['app/option/vip/multi-account/multi-account.component.css']\n})\nexport class MultiAccountComponent {\n\n    private windows: { account_name_encrypted: string, password_encrypted: string }[][];\n    private inputCheckMasterPassword: string = \"\";\n    private inputCheckMasterPasswordError: boolean = false;\n\n    constructor(private settingsService: SettingsService,\n        private applicationService: ApplicationService,\n        private crypt: CryptService,\n        private translate: TranslateService,\n        private promptService: PromptService\n    ) {\n        this.windows = settingsService.option.vip.multiaccount.windows;\n    }\n\n    private hasPassword() {\n        return this.settingsService.option.vip.multiaccount.master_password != \"\";\n    }\n\n    public setMasterPassword() {\n\n        let self = this;\n\n        self.promptService.custom({\n\n            input: 'password',\n            title: this.translate.instant(\"app.option.vip.multi-account.prompt.add-master.title\"),\n            confirmButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.add-master.confirm\"),\n            showLoaderOnConfirm: true,\n\n            showCancelButton: true,\n            cancelButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.add-master.cancel\"),\n\n            preConfirm: function (masterPassword) {\n\n                return new Promise(function (resolve, reject) {\n\n                    if (masterPassword.length < 8) { reject(self.translate.instant(\"app.option.vip.multi-account.prompt.add-master.min-lenght\", { \"lenght\": 8 })); return false; }\n\n                    self.applicationService.masterpassword = masterPassword;\n                    self.settingsService.option.vip.multiaccount.master_password = self.crypt.createHash(masterPassword);\n\n                    self.settingsService.option.vip.multiaccount.active = true;\n\n                    resolve();\n                })\n            },\n\n        }).then(function (vipId) {\n            self.promptService.success({ html: self.translate.instant(\"app.option.vip.multi-account.prompt.add-master.success-text\") })\n        }, (dismiss) => { });\n    }\n\n    public updateMasterPassword() {\n\n        let self = this;\n\n        self.promptService.custom({\n\n            title: this.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.title\"),\n            html:\n            '<input type=\"password\" id=\"input-old-password\" class=\"swal2-input\" placeholder=\"' + this.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.input-old-placeholder\") + '\">' +\n            '<input type=\"password\" id=\"input-new-password\" class=\"swal2-input\" placeholder=\"' + this.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.input-new-placeholder\") + '\">',\n\n            confirmButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.confirm\"),\n            showLoaderOnConfirm: true,\n\n            showCancelButton: true,\n            cancelButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.cancel\"),\n\n            preConfirm: function () {\n\n                return new Promise(function (resolve, reject) {\n\n                    let oldPassword = (<HTMLInputElement>document.getElementById(\"input-old-password\")).value;\n                    let newPassword = (<HTMLInputElement>document.getElementById(\"input-new-password\")).value;\n\n                    if (newPassword.length < 8) {\n                        reject(self.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.min-lenght\", { \"lenght\": 8 }));\n                        return false;\n                    }\n\n                    if (self.settingsService.option.vip.multiaccount.master_password != self.crypt.createHash(oldPassword)) {\n                        reject(self.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.incorrect-old\"));\n                        return false;\n                    }\n\n                    // For every windows and accounts in settings,\n                    // Re-encrypt account names and password with the new master password\n                    let windows = self.settingsService.option.vip.multiaccount.windows;\n                    for (let i in windows) {\n                        for (let j in windows[i]) {\n                            let account_name = self.crypt.decrypt(windows[i][j].account_name_encrypted, oldPassword);\n                            let password = self.crypt.decrypt(windows[i][j].password_encrypted, oldPassword);\n\n                            windows[i][j] = {\n                                account_name_encrypted: self.crypt.encrypt(account_name, newPassword),\n                                password_encrypted: self.crypt.encrypt(password, newPassword),\n                            }\n                        }\n                    }\n                    self.settingsService.option.vip.multiaccount.windows = windows;\n                    ////////////////////////////////////////////////////////////////\n\n                    self.settingsService.option.vip.multiaccount.master_password = self.crypt.createHash(newPassword);\n                    self.applicationService.masterpassword = newPassword;\n\n                    resolve();\n                })\n            },\n\n        }).then(function (vipId) {\n            self.promptService.success({ html: self.translate.instant(\"app.option.vip.multi-account.prompt.edit-master.success-text\") })\n        }, (dismiss) => { });\n\n    }\n\n    public checkMasterPassword() {\n        \n        console.log(this.inputCheckMasterPassword);\n\n        if (this.settingsService.option.vip.multiaccount.master_password == this.crypt.createHash(this.inputCheckMasterPassword)) {\n            this.inputCheckMasterPasswordError = false;\n            this.applicationService.masterpassword = this.inputCheckMasterPassword;\n        }else{\n            this.inputCheckMasterPasswordError = true;\n        }\n    }\n\n    private addAccount(windowIndex: number) {\n\n        let self = this;\n        let remote = shell;\n        let windows = this.settingsService.option.vip.multiaccount.windows;\n\n        if (this.applicationService.vipStatus < 3 && this.getTotalAccounts(windows) >= 4) {\n\n            this.promptService.custom({\n\n                type: \"error\",\n\n                title: this.translate.instant(\"app.option.vip.multi-account.prompt.maximum-account.title\"),\n                html: this.translate.instant(\"app.option.vip.multi-account.prompt.maximum-account.text\"),\n\n                confirmButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.maximum-account.confirm\"),\n                confirmButtonClass: 'btn btn-primary flat btn-lg spacing-left',\n\n                showCancelButton: true,\n                cancelButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.maximum-account.cancel\"),\n                cancelButtonClass: 'btn btn-default flat btn-lg'\n\n            }).then(function () {\n\n                remote.openExternal('https://www.tipeee.com/dtne');\n\n            }, (dismiss) => { });\n\n            return false;\n        }\n\n        self.promptService.custom({\n\n            title: this.translate.instant(\"app.option.vip.multi-account.prompt.add-account.title\"),\n            html:\n            '<input type=\"text\" id=\"input-account-login\" class=\"swal2-input\" placeholder=\"' + this.translate.instant(\"app.option.vip.multi-account.prompt.add-account.input-login-placeholder\") + '\">' +\n            '<input type=\"password\" id=\"input-account-password\" class=\"swal2-input\" placeholder=\"' + this.translate.instant(\"app.option.vip.multi-account.prompt.add-account.input-password-placeholder\") + '\">',\n\n            confirmButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.add-account.confirm\"),\n            showLoaderOnConfirm: true,\n\n            showCancelButton: true,\n            cancelButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.add-account.cancel\"),\n\n            preConfirm: function () {\n\n                return new Promise(function (resolve, reject) {\n\n                    let accountLogin = (<HTMLInputElement>document.getElementById(\"input-account-login\")).value;\n                    let accountPassword = (<HTMLInputElement>document.getElementById(\"input-account-password\")).value;\n\n                    if (accountLogin == \"\") { reject(self.translate.instant(\"app.option.vip.multi-account.prompt.add-account.min-lenght-login\")); return false; }\n                    if (accountPassword == \"\") { reject(self.translate.instant(\"app.option.vip.multi-account.prompt.add-account.min-lenght-password\")); return false; }\n\n                    windows[windowIndex].push({\n                        account_name_encrypted: self.crypt.encrypt(accountLogin, self.applicationService.masterpassword),\n                        password_encrypted: self.crypt.encrypt(accountPassword, self.applicationService.masterpassword)\n                    });\n\n                    self.settingsService.option.vip.multiaccount.windows = windows;\n\n                    resolve();\n                })\n            },\n\n        }).then(function () { }, (dismiss) => { });\n    }\n\n    // Delete the account from settings\n    private deleteAccount(windowIndex: number, accountIndex: number) {\n\n        let windows = this.settingsService.option.vip.multiaccount.windows;\n\n        windows[windowIndex].splice(accountIndex, 1);\n\n        this.settingsService.option.vip.multiaccount.windows = windows;\n    }\n\n    // Modify an account\n    private modifyAccount(windowIndex: number, accountIndex: number, account_name_encrypted: string) {\n\n        let self = this;\n        let login = self.crypt.decrypt(account_name_encrypted, self.applicationService.masterpassword);\n        let windows = self.settingsService.option.vip.multiaccount.windows;\n\n        self.promptService.custom({\n\n            title: this.translate.instant(\"app.option.vip.multi-account.prompt.edit-account.title\"),\n            html:\n            '<input type=\"text\" id=\"input-account-login\" value=\"' + login + '\" class=\"swal2-input\" placeholder=\"' + this.translate.instant(\"app.option.vip.multi-account.prompt.edit-account.input-login-placeholder\") + '\"  >' +\n            '<input type=\"password\" id=\"input-account-password\" class=\"swal2-input\" placeholder=\"' + this.translate.instant(\"app.option.vip.multi-account.prompt.edit-account.input-password-placeholder\") + '\">',\n\n            confirmButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.edit-account.confirm\"),\n            showLoaderOnConfirm: true,\n\n            showCancelButton: true,\n            cancelButtonText: this.translate.instant(\"app.option.vip.multi-account.prompt.edit-account.cancel\"),\n\n            preConfirm: function () {\n\n                return new Promise(function (resolve, reject) {\n\n                    let accountLogin = (<HTMLInputElement>document.getElementById(\"input-account-login\")).value;\n                    let accountPassword = (<HTMLInputElement>document.getElementById(\"input-account-password\")).value;\n\n                    if (accountLogin == \"\") { reject(self.translate.instant(\"app.option.vip.multi-account.prompt.edit-account.min-lenght-login\")); return false; }\n                    if (accountPassword == \"\") { reject(self.translate.instant(\"app.option.vip.multi-account.prompt.edit-account.min-lenght-password\")); return false; }\n\n                    windows[windowIndex][accountIndex].account_name_encrypted = self.crypt.encrypt(accountLogin, self.applicationService.masterpassword);\n                    windows[windowIndex][accountIndex].password_encrypted = self.crypt.encrypt(accountPassword, self.applicationService.masterpassword);\n\n                    self.settingsService.option.vip.multiaccount.windows = windows;\n\n                    resolve();\n                })\n            },\n\n        }).then(function () { }, (dismiss) => { });\n\n    }\n\n    private getTotalAccounts(windows: Array<Array<any>>): number {\n\n        let total: number = 0;\n\n        windows.forEach((window) => {\n            total += window.length;\n        });\n\n        return total;\n    }\n\n    private addWindow() {\n        let windows = this.settingsService.option.vip.multiaccount.windows;\n        windows.push([]);\n        this.settingsService.option.vip.multiaccount.windows = windows;\n    }\n\n    private deleteWindow(windowIndex: number) {\n\n        let windows = this.settingsService.option.vip.multiaccount.windows;\n\n        windows.splice(windowIndex, 1);\n\n        if (windows.length == 0) this.windows.push([]);\n\n        this.settingsService.option.vip.multiaccount.windows = windows;\n    }\n\n}"]}