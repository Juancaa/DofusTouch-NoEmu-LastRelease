{"version":3,"sources":["../src/browser/app/option/option.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,wCAAkD;AAClD,qFAAiF;AACjF,gEAAkD;AAClD,iDAAiD;AACjD,sEAAkE;AAOlE,IAAa,eAAe,GAA5B;IAEI,YACY,SAA2B,EAC3B,kBAAsC,EACtC,aAA4B,EAC5B,YAAmB;QAHnB,cAAS,GAAT,SAAS,CAAkB;QAC3B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;QAC5B,iBAAY,GAAZ,YAAY,CAAO;IAC3B,CAAC;IAEL,QAAQ;QACJ,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAEO,QAAQ;QACZ,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACnC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACpD,CAAC;IAEO,KAAK;QAET,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YACvB,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,0BAA0B,CAAC;YACzD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,qCAAqC,CAAC;YACnE,IAAI,EAAE,SAAS;SAClB,CAAC,CAAC,IAAI,CAAC;YAEJ,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAClC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEjD,CAAC,EAAE,CAAC,OAAO,OAAO,CAAC,CAAC,CAAC;IACzB,CAAC;CACJ,CAAA;AAjCY,eAAe;IAL3B,gBAAS,CAAC;QACP,QAAQ,EAAE,SAAS;QACnB,WAAW,EAAE,kCAAkC;QAC/C,SAAS,EAAE,CAAC,iCAAiC,CAAC;KACjD,CAAC;qCAIyB,gCAAgB;QACP,wCAAkB;QACvB,8BAAa;QACd,wBAAK;GANtB,eAAe,CAiC3B;AAjCY,0CAAe","file":"option.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { IpcRendererService } from './../../shared/electron/ipcrenderer.service';\nimport { Title } from \"@angular/platform-browser\";\nimport { TranslateService } from \"ng2-translate\";\nimport { PromptService } from \"../../shared/utils/prompt.service\";\n\n@Component({\n    selector: 'options',\n    templateUrl: 'app/option/option.component.html',\n    styleUrls: ['app/option/option.component.css']\n})\nexport class OptionComponent implements OnInit {\n\n    constructor(\n        private translate: TranslateService,\n        private ipcRendererService: IpcRendererService,\n        private promptService: PromptService,\n        private titleService: Title\n    ) { }\n\n    ngOnInit() {\n        this.titleService.setTitle('Option');\n    }\n\n    private validate() {\n        console.log('emit->valite-option');\n        this.ipcRendererService.send('validate-option');\n    }\n\n    private reset() {\n\n        let self = this;\n\n        this.promptService.confirm({\n            title: this.translate.instant(\"app.prompt.title.confirm\"),\n            html: this.translate.instant(\"app.option.prompt.reset-option.text\"),\n            type: \"warning\"\n        }).then(() => {\n\n            console.log('emit->reset-option');\n            self.ipcRendererService.send('reset-option');\n\n        }, (dismiss) => { });\n    }\n}\n"]}