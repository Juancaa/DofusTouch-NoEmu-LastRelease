{"version":3,"sources":["../src/browser/app/main/game/mods/health-bar/healthbar.ts"],"names":[],"mappings":"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","file":"healthbar.js","sourcesContent":["import {Option} from \"../../../../../shared/settings/settings.service\";\nimport {ShortCuts} from \"../../../../shortcuts/shortcuts\";\nimport {BarContainer} from \"./barcontainer\";\n\nexport class HealthBar {\n\n    private wGame: any | Window;\n    private params: Option.VIP.General\n    private shortcuts: ShortCuts;\n    private barContainer: BarContainer;\n    private fightJustStarted: boolean = false;\n    private events: any[];\n\n    constructor(wGame: any, params: Option.VIP.General) {\n        this.wGame = wGame;\n        this.params = params;\n        this.events = [];\n\n        if (this.params.health_bar) {\n\n            console.info('- enable Health-Bar');\n\n            let onCharacterSelectedSuccess = () => {\n\n                let healthbarCss = document.createElement('style');\n                healthbarCss.id = 'healthbarCss';\n                healthbarCss.innerHTML = `\n                .lifeBarsContainer {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    pointer-events: none;\n                    z-index: 1;\n                    visibility: hidden;\n                }\n\n                .lifeBarContainer {\n                    box-sizing: border-box;\n                    border: 1px gray solid;\n                    background-color: #222;\n                    height: 6px;\n                    width: 80px;\n                    position: absolute;\n                    border-radius: 3px;\n                    overflow: hidden;\n                    transition-duration: 500ms;\n                    margin-top: 10px;\n                }\n\n                .lifeBar {\n                    transition-duration: 300ms;\n                    height: 100%;\n                    width: 0%;\n                    background-color: #333;\n                }\n\n                .shieldBar {\n                    transition-duration: 300ms;\n                    height: 100%;\n                    width: 0%;\n                    margin-left: 50%;\n                    background-color: #944ae0;\n                    position: absolute;\n                    top: 0;\n                }\n\n                .lifePointsText {\n                    font-size: 12px;\n                    position: absolute;\n                    width: 80px;\n                    color: white;\n                    text-shadow: 0px 0px 5px rgba(0, 0, 0, 0.9);\n                    transition-duration: 500ms;\n                    margin-top: 16px;\n                    margin-left: 2px;\n                }`;\n                this.wGame.document.getElementsByTagName('head')[0].appendChild(healthbarCss);\n\n                this.shortcuts = new ShortCuts(this.wGame);\n                this.barContainer = new BarContainer(this.wGame);\n\n\n                this.removeOnDeath();\n                this.setFightStart();\n                this.displayOnStart();\n                this.stopOnFightEnd();\n\n\n                this.shortcuts.bind(this.params.health_bar_shortcut, () => {\n                    console.log('start health bar');\n                    this.barContainer.toggle();\n                });\n\n            }\n\n            this.wGame.gui.playerData.on(\"characterSelectedSuccess\", onCharacterSelectedSuccess);\n            this.events.push(() => {\n                this.wGame.gui.playerData.removeListener(\"characterSelectedSuccess\", onCharacterSelectedSuccess);\n            });\n\n            if(this.wGame.gui.isConnected){\n                onCharacterSelectedSuccess();\n            }\n        }\n    }\n\n\n    private removeOnDeath(): void {\n        let onDeath = (e: any) => {\n            try {\n                this.barContainer.destroyBar(e.targetId);\n            } catch (ex) {\n                console.log(ex);\n            }\n        };\n\n        this.wGame.gui.on('GameActionFightDeathMessage', onDeath);\n        this.events.push(() => {\n            this.wGame.gui.removeListener('GameActionFightDeathMessage', onDeath);\n        });\n    }\n\n    private setFightStart(): void {\n        let onFightStart = (e: any) => {\n            try {\n                this.fightJustStarted = true;\n            } catch (ex) {\n                console.log(ex);\n            }\n        };\n\n        this.wGame.dofus.connectionManager.on('GameFightStartingMessage', onFightStart);\n        this.events.push(() => {\n            this.wGame.dofus.connectionManager.removeListener('GameFightStartingMessage', onFightStart);\n        });\n    }\n\n    private displayOnStart(): void {\n        let onNewRound = (e: any) => {\n            try {\n                if (this.fightJustStarted) {\n                    this.fightJustStarted = false;\n                    this.barContainer.fightStarted();\n                }\n            } catch (ex) {\n                console.log(ex);\n            }\n        };\n\n        this.wGame.dofus.connectionManager.on('GameFightNewRoundMessage', onNewRound);\n        this.events.push(() => {\n            this.wGame.dofus.connectionManager.removeListener('GameFightNewRoundMessage', onNewRound);\n        });\n    }\n\n    private stopOnFightEnd(): void {\n        let onFightEnd = (e: any) => {\n            try {\n                this.barContainer.fightEnded();\n            } catch (ex) {\n                console.log(ex);\n            }\n        };\n\n        this.wGame.dofus.connectionManager.on('GameFightEndMessage', onFightEnd);\n        this.events.push(() => {\n            this.wGame.dofus.connectionManager.removeListener('GameFightEndMessage', onFightEnd);\n        });\n    }\n\n\n    public reset() {\n        if (this.params.health_bar) {\n            this.shortcuts.unBindAll();\n            this.barContainer.destroy();\n            this.events.forEach((event) => {\n                event();\n            });\n            this.events = [];\n            let healthbarCss = this.wGame.document.getElementById('healthbarCss');\n            healthbarCss.parentElement.removeChild(healthbarCss);\n        }\n    }\n\n}\n"]}