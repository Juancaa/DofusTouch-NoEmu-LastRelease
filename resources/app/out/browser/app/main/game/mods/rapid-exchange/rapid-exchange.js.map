{"version":3,"sources":["../src/browser/app/main/game/mods/rapid-exchange/rapid-exchange.ts"],"names":[],"mappings":"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","file":"rapid-exchange.js","sourcesContent":["/**\n * Allow the user to hold \"control\" key and double click\n * items slots in the bank to quickly move items\n */\nexport class RapidExchange {\n\n    private wGame: any | Window;\n\n    // Character's inventory in bank exchange view\n    private exchangeInventory: any;\n\n    // Bank's inventory in bank exchange view\n    private exchangeStorage: any;\n\n    // Character's inventory in trade view\n    private tradeWithPlayerAndNPCInventory: any;\n    \n    // Does the \"ctrl\" key is pressed ?\n    private keyPressed: boolean = false;\n\n    // All ids of the windows we need\n    private supportedWindows: Array<string> = [\"exchangeInventory\", \"exchangeStorage\", \"tradeWithPlayerAndNPCInventory\"];\n\n    constructor (wGame: any) {\n        this.wGame = wGame;\n\n        // Retrieve windows from the gui\n        let getWindowsAndStartup = () => {\n            let windows = this.wGame.gui.windowsContainer.getChildren();\n\n            windows.forEach((window: any) => {\n                if (this.supportedWindows.includes(window.id))\n                    this[window.id] = window;\n            });\n\n            this.setKeyListenner();\n\n            this.setInventoryEventListener();\n        }\n\n        this.wGame.gui.on('connected', getWindowsAndStartup);\n    }\n\n    // Listen to the \"ctrl\" key, and remember it's state\n    private setKeyListenner() {\n        this.wGame.document.onkeydown = (event: KeyboardEvent) => {\n            if (event.keyCode == 17)\n                this.keyPressed = true;\n        };\n\n        this.wGame.document.onkeyup = (event: KeyboardEvent) => {\n            if (event.keyCode == 17)\n                this.keyPressed = false;\n        };\n    }\n\n    // Listen \"slot-doubletap\" events on windows and when it occurs, call the moveItem function\n    private setInventoryEventListener() {\n        if (this.exchangeInventory)\n            this.exchangeInventory.on('slot-doubletap', (slot: any, x: any, y: any, storage: any) => {\n                    this.moveItem(slot.itemInstance, \"exchangeInventory\", false);\n            });\n\n        if (this.exchangeStorage)\n            this.exchangeStorage.on('slot-doubletap', (slot: any, x: any, y: any, storage: any) => {\n                    this.moveItem(slot.itemInstance, \"exchangeStorage\", true);\n            });\n\n        if (this.tradeWithPlayerAndNPCInventory) {\n            this.tradeWithPlayerAndNPCInventory.on('slot-doubletap', (slot: any) => {\n                    this.moveItem(slot.itemInstance, \"tradeWithPlayerAndNPCInventory\", false);\n            });\n        }\n\n        // Special Event for the \"common\" trade window\n        // When a slot is added, add a listener on it, tha will call the move item icon\n        this.wGame.gui.on('ExchangeObjectAddedMessage', (msg: any) => {\n\n            // If the event come from the remote character\n            if (msg.remote)\n                return;\n\n            var UID = msg.object.objectUID;\n            var quantity = msg.object.quantity;\n\n            let remove = () => {\n                this.moveItem({objectUID: UID, quantity: quantity}, \"tradeWithPlayer\", true);\n            }\n\n            // Retrieve the trade space window\n            let myTradeSpace = this.getWindow(\"tradeWithPlayer\");\n\n            // Sometimes the slot is not added instantly\n            // So wait to avoid error\n            setTimeout(() => {\n                myTradeSpace._allSlots.getChild('slot' + UID).on('doubletap', remove);\n            }, 500);\n        });\n    }\n\n    // Move the item from a window to another\n    // And Hide the MinMax selector\n    private moveItem(itemInstance: any, inventoryId: string, toStorage: boolean) {\n        if (itemInstance.quantity > 1 && this.keyPressed) {\n            this.wGame.dofus.sendMessage('ExchangeObjectMoveMessage', {\n                objectUID: itemInstance.objectUID,\n                quantity: toStorage ? -itemInstance.quantity : itemInstance.quantity\n            });\n\n            this.hideMinMaxSelector(inventoryId);\n        }\n    }\n\n    // Return the window that match the id\n    private getWindow(id: string) {\n        // Get all windows\n        let windows = this.wGame.gui.windowsContainer.getChildren();\n\n        let window = null;\n\n        // Loop through them\n        for (let i in windows) {\n            // If we hit the matching window, save it and break the loop\n            if (windows[i].id === id) {\n                window = windows[i];\n                break;\n            }\n        }\n\n        // In case we haven't found it\n        if (!window)\n            return null;\n\n        // in the case of the common trade window\n        if (window._myTradeSpace)\n            return window._myTradeSpace\n        \n        // If everithing is ok, return the matching window\n        return window;\n\n    }\n\n    // Hide the Minmax selector\n    private hideMinMaxSelector(id: string) {\n\n        let window = this.getWindow(id);\n\n        if (!window)\n            return;\n\n        switch (id) {\n            // Simplest case, that get the function in their prototype\n            case \"exchangeInventory\":\n            case \"exchangeStorage\":\n                window.closeMinMaxSelector();\n                break;\n            \n            // For these, fond the MinMax selector in children of the window and call the hide function\n            case \"tradeWithPlayerAndNPCInventory\":\n            case \"tradeWithPlayer\":\n                for (let i in window._childrenList) {\n                    if (window._childrenList[i].rootElement && window._childrenList[i].rootElement.className == \"minMaxSelector\") {\n                        window._childrenList[i].hide();\n                    }\n                }\n        }\n\n    }\n}"]}