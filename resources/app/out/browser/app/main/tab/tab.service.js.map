{"version":3,"sources":["../src/browser/app/main/tab/tab.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,wCAA2C;AAI3C,IAAa,UAAU,GAAvB;IADA;QAGY,UAAK,GAAS,EAAE,CAAC;IA4C7B,CAAC;IA1CG,IAAI,IAAI;QACJ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAO;YAC7B,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACV,CAAC;IAED,MAAM,CAAC,GAAQ;QACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,UAAU,CAAC,OAAY;QACnB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAO;YACjC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAA,CAAC,IAAI,CAAC,CAAA,CAAC;YACL,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;QAED,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAO;YAC7B,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAA,CAAC,IAAI,CAAC,CAAA,CAAC;YACL,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,SAAS,CAAC,GAAQ;QACd,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEpC,EAAE,CAAA,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAA,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC;IACL,CAAC;CAEJ,CAAA;AA9CY,UAAU;IADtB,iBAAU,EAAE;GACA,UAAU,CA8CtB;AA9CY,gCAAU","file":"tab.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Tab } from './tab';\n\n@Injectable()\nexport class TabService {\n\n    private _tabs:Tab[] = [];\n\n    get tabs(): Tab[]{\n        return this._tabs;\n    }\n\n    getTab(id: number): Tab {\n        return this._tabs.filter((tab:Tab) => {\n            return tab.id === id;\n        })[0];\n    }\n\n    addTab(tab: Tab): void {\n        this._tabs.push(tab);\n    }\n\n    getNearTab(nearTab: Tab): Tab {\n        let tabs = this._tabs.filter((tab:Tab) => {\n            return tab.id > nearTab.id;\n        });\n\n        if(tabs){\n            return tabs[0];\n        }\n\n        tabs = this._tabs.filter((tab:Tab) => {\n            return tab.id < nearTab.id;\n        });\n\n        if(tabs){\n            return tabs[(tabs.length-1)];\n        }\n\n        return null;\n    }\n\n    removeTab(tab: Tab): void {\n        let index = this._tabs.indexOf(tab);\n\n        if(index !== -1){\n            this._tabs.splice(index, 1);\n        }\n    }\n\n}\n"]}