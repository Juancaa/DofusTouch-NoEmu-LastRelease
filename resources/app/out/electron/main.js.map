{"version":3,"sources":["../src/electron/main.ts"],"names":[],"mappings":";;AACA,MAAM,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACrD,uCAA6B;AAE7B,+CAA0C;AAI1C,cAAG,CAAC,WAAW,CAAC,YAAY,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;AAG7D,cAAG,CAAC,WAAW,CAAC,YAAY,CAAC,gCAAgC,CAAC,CAAC;AAO/D,MAAM,iBAAiB,GAAG;IACtB,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;IAC7C,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;IAChD,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;IAC/C,EAAE,IAAI,EAAE,uBAAuB,EAAE,IAAI,EAAE,MAAM,EAAE;IAC/C,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAC;IACxC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAC;IACjC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAC;CACvC,CAAC;AACF,MAAM,UAAU,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC;AAGtD,cAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ;IAC9E,KAAK,CAAC,cAAc,EAAE,CAAC;IACvB,QAAQ,CAAC,IAAI,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC;AAEH,cAAG,CAAC,EAAE,CAAC,OAAO,EAAE;IAGZ,yBAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;AACvC,CAAC,CAAC,CAAC;AAEH,cAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;IACxB,OAAO,CAAC,QAAQ,CAAC;IAEb,cAAG,CAAC,IAAI,EAAE,CAAC;AAEnB,CAAC,CAAC,CAAC","file":"main.js","sourcesContent":["import App = Electron.App;\nconst commandLineArgs = require('command-line-args');\nimport {app} from 'electron';\n\nimport {Application} from './application';\n\n\n// Ignore black list GPU for WebGL\napp.commandLine.appendSwitch('ignore-gpu-blacklist', 'true');\n\n// Disable backgrounding renderer\napp.commandLine.appendSwitch(\"disable-renderer-backgrounding\");\n\n//app.commandLine.appendSwitch(\"js-flags\", \"--max-old-space-size=8192\");\n\n\n\n// Command Line Argument\nconst optionDefinitions = [\n    { name: 'update', alias: 'u', type: Boolean },\n    { name: 'changelog', alias: 'l', type: Boolean },\n    { name: 'relaunch', alias: 'r', type: Boolean },\n    { name: 'remote-debugging-port', type: String },\n    { name: 'expose_debug_as', type: String},\n    { name: 'devmode', type: Boolean},\n    { name: 'skipupdate', type: Boolean}\n];\nconst cmdOptions = commandLineArgs(optionDefinitions);\n\n\napp.on('certificate-error', (event, webContents, url, error, certificate, callback) => {\n    event.preventDefault();\n    callback(true);\n});\n\napp.on('ready', () => {\n\n    // Singleton\n    Application.init(cmdOptions).run();\n});\n\napp.on('window-all-closed', function() {\n    process.platform;\n    //if (process.platform !== 'darwin') {\n        app.quit();\n    //}\n});\n\n/*app.on('activate', function() {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        createWindow();\n    }\n});*/\n"]}