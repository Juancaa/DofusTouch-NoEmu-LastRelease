{"version":3,"sources":["../src/electron/check-settings.ts"],"names":[],"mappings":"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","file":"check-settings.js","sourcesContent":["import {ISettings} from \"./isettings\";\nimport {DefaultSettings} from './default.settings';\nconst settings = require('electron-settings');\n\nexport function checkSettings(){\n    let sett:ISettings = settings.getSync();\n\n    function checkRecursive(settings: any, defaultSettings: any) {\n        for (let id in defaultSettings) {\n            if (Array.isArray(defaultSettings[id])) {\n                if (!Array.isArray(settings[id]) || typeof settings[id] !== 'object') {\n                    console.log('error setting '+id);\n                    console.log(settings[id]);\n                    return false;\n                }\n            }\n            else {\n                if (typeof defaultSettings[id] !== typeof settings[id] && defaultSettings[id] !== null){\n                    console.log('error setting '+id);\n                    console.log(settings[id]);\n                    return false;\n                }\n            }\n            if (typeof defaultSettings[id] === 'object') {\n                if (!checkRecursive(settings[id], defaultSettings[id])){\n                    console.log(settings[id]);\n                    console.log('error setting '+id);\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    let ok = checkRecursive(sett, DefaultSettings);\n\n\n    sett.alertCounter = Math.floor(sett.alertCounter);\n\n    if(!sett.option.general.resolution.x || !sett.option.general.resolution.y){\n        ok = false;\n    }else{\n        sett.option.general.resolution.x = Math.floor(sett.option.general.resolution.x);\n        sett.option.general.resolution.y = Math.floor(sett.option.general.resolution.y);\n    }\n\n    if (ok) console.log('check settings OK');\n    else console.log('check settings FAILED');\n\n\n    return ok;\n}\n"]}