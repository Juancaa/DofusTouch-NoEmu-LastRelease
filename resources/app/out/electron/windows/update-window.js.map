{"version":3,"sources":["../src/electron/windows/update-window.ts"],"names":[],"mappings":"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","file":"update-window.js","sourcesContent":["import request = require(\"request\");\nconst pkg = require('./../../../package.json');\nconst settings = require('electron-settings');\nconst i18n = require('node-translate');\nconst decompress = require('decompress');\nconst decompressTargz = require('decompress-targz');\nconst decompressUnzip = require('decompress-unzip');\n\nimport electron = require(\"electron\");\nimport {ipcMain, app, Menu, BrowserWindow, dialog, shell} from 'electron';\nimport * as url from 'url';\nimport * as fs from 'fs';\n\nimport {Application} from '../application';\nimport {spawn} from \"child_process\";\n\ndeclare interface UpdateResponse {\n    noemu: {\n        version: string;\n        required: boolean;\n        web: boolean;\n    };\n    dofustouch: {\n        version: string;\n        file: string;\n        fileName: string;\n    }\n}\n\nexport class UpdateWindow {\n\n    public static win: Electron.BrowserWindow;\n\n    private static createWindow(): Electron.BrowserWindow {\n        let window = new electron.BrowserWindow({\n            width: 800,\n            height: 150,\n            resizable: false,\n            center: true,\n            parent: electron.BrowserWindow.getFocusedWindow(),\n            darkTheme: true,\n            skipTaskbar: true,\n            show: true,\n            modal: true,\n        });\n\n        window.setMenu(null);\n\n        window.on('closed', () => {\n            window = null;\n        });\n\n        return window;\n    }\n\n    private static openUpdateModal(response: UpdateResponse): Promise<any> {\n        return new Promise((resolve, reject) => {\n\n            let message = i18n.t('updater.new-update.default');\n            let buttons: Array<string> = [i18n.t('updater.new-update.go-site')];\n\n            if (!response.noemu.required) {\n                buttons.push(i18n.t('updater.new-update.ignore'));\n            } else {\n                message = i18n.t('updater.new-update.required')\n            }\n\n\n            dialog.showMessageBox(BrowserWindow.getFocusedWindow(), {\n                type: 'info',\n                title: i18n.t('updater.new-update.title', {version: response.noemu.version}),\n                message: message,\n                buttons: buttons,\n            }, (buttonIndex: number) => {\n                if (buttonIndex == 0) {\n                    shell.openExternal(\"http://dofustouch.no-emu.com/#download\")\n                    app.exit();\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n\n    public static checkNoEmuUpdate(response: UpdateResponse): Promise<UpdateResponse> {\n        return new Promise((resolve, reject) => {\n            console.log(pkg.version);\n            if (pkg.version == response.noemu.version) {\n                console.log('No-Emu is already up to date');\n                resolve(response);\n            } else {\n                switch (process.platform) {\n                    case 'darwin':\n                    case 'linux':\n                    case 'win32':\n                        this.openUpdateModal(response).then(() => {\n                            resolve(response);\n                        });\n                        break;\n                    /*case 'win32':\n                     if (!fs.existsSync('updater.exe')) {\n                     dialog.showMessageBox(BrowserWindow.getFocusedWindow(), {\n                     type: 'info',\n                     title: 'Erreur updater.exe manquant',\n                     message: 'Attention, il semblerait que votre système ai bloqué l\\'updater' +\n                     ' de No-Emu. Ajoutez une règle dans votre antivirus pour le fichier updater.exe,' +\n                     ' ou téléchargez la dernière version depuis notre site.',\n                     buttons: ['Se rendre sur le site', 'Ok'],\n                     }, (buttonIndex: number) => {\n                     if (buttonIndex == 0) {\n                     shell.openExternal(\"http://dofustouch.no-emu.com/#download\")\n                     }\n                     app.exit();\n                     });\n                     } else {\n                     if(response.noemu.web){\n                     this.openUpdateModal(response).then(() => {\n                     resolve(response);\n                     });\n                     }else{\n                     spawn('updater.exe', null, {\n                     detached: true\n                     });\n                     app.quit();\n                     }\n                     }\n                     break;*/\n                }\n            }\n        });\n    }\n\n    public static checkGameUpdate(response: UpdateResponse): Promise<UpdateResponse> {\n        return new Promise((resolve, reject) => {\n\n            if (settings.getSync('buildVersion') == response.dofustouch.version) {\n                console.log('Game is already up to date');\n                resolve();\n            } else {\n                this.win = this.createWindow();\n\n\n                let savePath = app.getPath('userData') + '/' + response.dofustouch.fileName;\n                console.log(savePath);\n\n                let remoteUrl = response.dofustouch.file;\n\n                this.win.loadURL(`file://${Application.appPath}/out/browser/index.html#/update/${encodeURIComponent(savePath)}/${encodeURIComponent(remoteUrl)}`);\n\n                if (Application.cmdOptions.devmode) {\n                    this.win.webContents.openDevTools();\n                }\n\n                ipcMain.on('install-update', (event, arg) => {\n                    console.log('ready to update');\n\n                    decompress(savePath, app.getPath('userData') + '/game', {\n                        plugins: [\n                            decompressTargz(),\n                            decompressUnzip()\n                        ]\n                    }).then(() => {\n                        console.log('Files decompressed');\n                        settings.setSync('buildVersion', response.dofustouch.version);\n                        resolve();\n                    }).catch(reject);\n\n                    /*extract(savePath, {dir: app.getPath('userData') + '/game'}, function (err: any) {\n\n                     if (err) {\n                     return reject(err);\n                     }\n\n                     console.log('extract finish');\n                     settings.setSync('buildVersion', response.dofustouch.version);\n                     resolve();\n                     })*/\n                });\n            }\n        });\n    }\n\n    public static run(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.retrieveUpdate().then((response) => {\n                return this.checkNoEmuUpdate(response);\n            }).then((response) => {\n                return this.checkGameUpdate(response);\n            }).then(() => {\n                resolve();\n            }).catch(reject);\n        });\n\n    }\n\n    private static retrieveUpdate(): Promise<UpdateResponse> {\n        return new Promise((resolve, reject) => {\n\n            let queries = 'version=' + settings.getSync('buildVersion') + '&os=' + process.platform+ '&time=' +new Date().getTime();\n\n            let uri = `${Application.website}/update.php?${queries}`;\n\n            request.get({\n                url: uri,\n                forever: true,\n                gzip: true\n            }, (error, response, body) => {\n                console.log(body);\n                if (!error && response.statusCode == 200) {\n                    let parseBody: UpdateResponse = JSON.parse(body);\n                    resolve(parseBody);\n                } else {\n\n                    if (error) {\n                        reject(error);\n                    } else {\n                        reject(body);\n                    }\n                }\n            });\n        });\n    }\n\n}\n"]}